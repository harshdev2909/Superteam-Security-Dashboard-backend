[
  {
    "id": "1",
    "date": "2025-04-17",
    "protocol": "SolFlare Protocol",
    "type": "Reentrancy",
    "fundsLost": "$8.2M",
    "status": "Confirmed",
    "attacker": "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
    "description": "An attacker exploited a reentrancy vulnerability in the SolFlare Protocol's staking contract, draining $8.2M in user funds.",
    "impact": "The exploit affected approximately 1,200 users who had staked SOL in the protocol. The protocol has temporarily paused all operations.",
    "timeline": [
      { "time": "2025-04-17 03:14 UTC", "description": "Initial attack transaction detected" },
      { "time": "2025-04-17 03:22 UTC", "description": "Multiple withdrawals executed by attacker" },
      { "time": "2025-04-17 04:05 UTC", "description": "Protocol team alerted and emergency shutdown initiated" }
    ],
    "technicalDetails": "The attacker exploited a reentrancy vulnerability in the withdraw function of the staking contract. By recursively calling the withdraw function before the balance was updated, the attacker was able to drain funds multiple times.",
    "vulnerability": "Missing reentrancy guard in the withdraw function allowed the attacker to recursively call the function before state updates were completed.",
    "mitigation": "Implement a reentrancy guard modifier on all external functions that modify state. Follow the checks-effects-interactions pattern.",
    "transactionIds": ["5KKmPuLVMpVkz4FMzAKKUJMELU4UQpjVYTQRKLvpR7Z2", "3nJUvmGHWVwPYBJK9MKozAHCFRGg7xjvJ9NQw3hVzwRB"],
    "transactionData": [
      { "id": "tx1", "source": "Attacker", "target": "Contract", "value": 0.1, "type": "Call" },
      { "id": "tx2", "source": "Contract", "target": "Attacker", "value": 2.5, "type": "Transfer" },
      { "id": "tx3", "source": "Attacker", "target": "Contract", "value": 0.1, "type": "Call" },
      { "id": "tx4", "source": "Contract", "target": "Attacker", "value": 2.5, "type": "Transfer" },
      { "id": "tx5", "source": "Attacker", "target": "ExchangeA", "value": 5.0, "type": "Transfer" }
    ],
    "vulnerableCode": "function withdraw(uint256 amount) external {\n    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n    (bool success, ) = msg.sender.call{value: amount}(\"\");\n    require(success, \"Transfer failed\");\n    balances[msg.sender] -= amount;\n}",
    "exploitCode": "contract Attacker {\n    SolFlareStaking target;\n    \n    constructor(address _target) {\n        target = SolFlareStaking(_target);\n    }\n    \n    function attack() external payable {\n        target.deposit{value: 1 ether}();\n        target.withdraw(1 ether);\n    }\n    \n    receive() external payable {\n        if (address(target).balance >= 1 ether) {\n            target.withdraw(1 ether);\n        }\n    }\n}",
    "fixedCode": "function withdraw(uint256 amount) external nonReentrant {\n    require(balances[msg.sender] >= amount, \"Insufficient balance\");\n    balances[msg.sender] -= amount;\n    (bool success, ) = msg.sender.call{value: amount}(\"\");\n    require(success, \"Transfer failed\");\n}",
    "referenceUrl": "https://solflare.com/security/post-mortem-2025-04-17"
  },
  {
    "id": "2",
    "date": "2025-04-10",
    "protocol": "SolYield Finance",
    "type": "Flash Loan Attack",
    "fundsLost": "$12.5M",
    "status": "Confirmed",
    "attacker": "0x9Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
    "description": "An attacker used a flash loan to manipulate the price of a token pair and drain funds from the SolYield Finance protocol.",
    "impact": "The exploit resulted in a loss of $12.5M from the protocol's liquidity pools, affecting thousands of users who had provided liquidity.",
    "timeline": [
      { "time": "2025-04-10 08:22 UTC", "description": "Flash loan taken from lending protocol" },
      { "time": "2025-04-10 08:22 UTC", "description": "Price manipulation through multiple swaps" },
      { "time": "2025-04-10 08:23 UTC", "description": "Funds drained from vulnerable pools" },
      { "time": "2025-04-10 09:15 UTC", "description": "Protocol team identified the exploit" }
    ],
    "technicalDetails": "The attacker took a flash loan of $30M from a lending protocol, used it to manipulate the price of a token pair in the AMM, and then drained funds from the protocol's yield farms that relied on the manipulated price oracle.",
    "vulnerability": "The protocol used an on-chain price oracle without time-weighted average price (TWAP) protection, making it vulnerable to price manipulation.",
    "mitigation": "Implement TWAP oracles and multiple price feeds. Add circuit breakers for large price movements.",
    "transactionIds": ["7KLmPuLVMpVkz4FMzAKKUJMELU4UQpjVYTQRKLvpR7Z2", "9nJUvmGHWVwPYBJK9MKozAHCFRGg7xjvJ9NQw3hVzwRB"],
    "transactionData": [],
    "vulnerableCode": null,
    "exploitCode": null,
    "fixedCode": null,
    "referenceUrl": "https://solyield.finance/security/incident-analysis-2025-04-10"
  },
  {
    "id": "3",
    "date": "2025-04-02",
    "protocol": "SolStake",
    "type": "Oracle Manipulation",
    "fundsLost": "$5.7M",
    "status": "Under Investigation",
    "attacker": null,
    "description": "An attacker manipulated the price oracle used by SolStake to issue loans at favorable rates and extract value.",
    "impact": "The protocol lost approximately $5.7M in assets. The team has paused lending operations while investigating.",
    "timeline": [
      { "time": "2025-04-02 15:30 UTC", "description": "Unusual price movements detected" },
      { "time": "2025-04-02 15:45 UTC", "description": "Large loans taken out against manipulated collateral" },
      { "time": "2025-04-02 16:20 UTC", "description": "Protocol team alerted and lending paused" }
    ],
    "technicalDetails": "The attacker manipulated the price of a low-liquidity token used as collateral by executing a series of trades on decentralized exchanges. They then used the inflated collateral to borrow assets from the protocol.",
    "vulnerability": "The protocol relied on a single source for price data without sufficient safeguards against manipulation.",
    "mitigation": "Implement multiple oracle sources and add circuit breakers for suspicious price movements.",
    "transactionIds": ["2KLmPuLVMpVkz4FMzAKKUJMELU4UQpjVYTQRKLvpR7Z2"],
    "transactionData": [],
    "vulnerableCode": null,
    "exploitCode": null,
    "fixedCode": null,
    "referenceUrl": "https://solstake.com/security/incident-2025-04-02"
  },
  {
    "id": "4",
    "date": "2025-03-15",
    "protocol": "SolSwap",
    "type": "Access Control",
    "fundsLost": "$3.2M",
    "status": "Confirmed",
    "attacker": null,
    "description": "An attacker exploited a vulnerability in the access control mechanism of SolSwap's admin functions.",
    "impact": "The attacker was able to set arbitrary fees and drain approximately $3.2M from the protocol's fee collector contract.",
    "timeline": [
      { "time": "2025-03-15 12:10 UTC", "description": "Unauthorized access to admin functions" },
      { "time": "2025-03-15 12:15 UTC", "description": "Fee parameters modified" },
      { "time": "2025-03-15 12:30 UTC", "description": "Funds drained from fee collector" }
    ],
    "technicalDetails": "The attacker discovered that the onlyOwner modifier was missing from a critical function that could modify fee parameters. They used this to set the fee to 100% and direct it to their wallet.",
    "vulnerability": "Missing access control on a critical admin function allowed unauthorized modification of protocol parameters.",
    "mitigation": "Implement proper access control on all admin functions. Conduct a comprehensive review of all privileged functions.",
    "transactionIds": ["8KLmPuLVMpVkz4FMzAKKUJMELU4UQpjVYTQRKLvpR7Z2"],
    "transactionData": [],
    "vulnerableCode": null,
    "exploitCode": null,
    "fixedCode": null,
    "referenceUrl": "https://solswap.fi/security/incident-report-2025-03-15"
  },
  {
    "id": "5",
    "date": "2025-03-08",
    "protocol": "SolLend",
    "type": "Logic Error",
    "fundsLost": "$7.8M",
    "status": "Confirmed",
    "attacker": null,
    "description": "A logic error in SolLend's liquidation mechanism allowed an attacker to liquidate healthy positions and steal collateral.",
    "impact": "Multiple users had their collateral liquidated despite maintaining healthy collateralization ratios, resulting in approximately $7.8M in losses.",
    "timeline": [
      { "time": "2025-03-08 05:20 UTC", "description": "First suspicious liquidation observed" },
      { "time": "2025-03-08 06:45 UTC", "description": "Multiple liquidations executed in rapid succession" },
      { "time": "2025-03-08 07:30 UTC", "description": "Protocol team identified the issue and paused liquidations" }
    ],
    "technicalDetails": "The attacker identified a logic error in the health factor calculation that incorrectly flagged positions as undercollateralized under specific market conditions.",
    "vulnerability": "A sign error in the health factor calculation could result in healthy positions being flagged for liquidation.",
    "mitigation": "Fix the logic error in the health factor calculation and add additional safeguards to prevent liquidation of healthy positions.",
    "transactionIds": ["6KLmPuLVMpVkz4FMzAKKUJMELU4UQpjVYTQRKLvpR7Z2"],
    "transactionData": [],
    "vulnerableCode": null,
    "exploitCode": null,
    "fixedCode": null,
    "referenceUrl": "https://sollend.com/security/incident-analysis-2025-03-08"
  }
]