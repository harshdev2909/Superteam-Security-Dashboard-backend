import fs from 'fs';
import { PrismaClient } from '@prisma/client';

// Initialize Prisma client
const prisma = new PrismaClient();

// Convert USD string to lamports (1 SOL = 1e9 lamports, assume $140/SOL)
function usdToLamports(usdStr: string): bigint {
  const usd = parseFloat(usdStr.replace('$', '').replace('M', '')) * 1e6;
  const solPrice = 140; // $140/SOL (2025 estimate)
  const sol = usd / solPrice;
  return BigInt(Math.round(sol * 1e9));
}

async function ingestSampleExploits(filePath: string) {
  try {
    // Read JSON file
    const exploitData = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    for (const exploit of exploitData) {
      // Validate data
      const date = new Date(`${exploit.date}T00:00:00Z`);
      if (isNaN(date.getTime())) {
        console.warn(`Invalid date for ${exploit.protocol}, skipping`);
        continue;
      }

      const fundsLost = usdToLamports(exploit.fundsLost);
      const txIds = Array.isArray(exploit.transactionIds) ? exploit.transactionIds : [];

      // Map extra fields to metadata
      const metadata = {
        id: exploit.id,
        attacker: exploit.attacker,
        impact: exploit.impact,
        timeline: exploit.timeline,
        technicalDetails: exploit.technicalDetails,
        vulnerability: exploit.vulnerability,
        mitigation: exploit.mitigation,
        transactionData: exploit.transactionData,
        exploitCode: exploit.exploitCode,
        fixedCode: exploit.fixedCode,
        referenceUrl: exploit.referenceUrl,
      };

      await prisma.exploit.upsert({
        where: { id: exploit.id },
        update: {},
        create: {
          date,
          protocol: exploit.protocol || 'Unknown',
          type: exploit.type || 'Unknown',
          fundsLost,
          txIds,
          description: exploit.description || `Exploit on ${exploit.protocol}`,
          codeSnippet: exploit.vulnerableCode || null,
          status: exploit.status || 'Unknown',
          metadata,
        },
      });
    }

    console.log(`Ingested ${exploitData.length} sample exploits successfully`);
  } catch (error) {
    console.error('Error ingesting sample exploit data:', (error as any).message);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the script
ingestSampleExploits('exploits.json').catch(console.error);