"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const index_1 = require("../index");
// Helper function to convert BigInt to string in objects
const serializeBigInt = (obj) => {
    return JSON.parse(JSON.stringify(obj, (key, value) => typeof value === 'bigint' ? value.toString() : value));
};
const router = (0, express_1.Router)();
// GET /exploits - Fetch list of exploits with optional filters
router.get('/', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { date, protocol, type } = req.query;
        const filters = {};
        if (date)
            filters.date = { equals: new Date(date) };
        if (protocol)
            filters.protocol = { equals: protocol };
        if (type)
            filters.type = { equals: type };
        const exploits = yield index_1.prisma.exploit.findMany({
            where: filters,
            orderBy: { date: 'desc' },
        });
        // Serialize BigInt fields
        const serializedExploits = serializeBigInt(exploits);
        res.json(serializedExploits);
    }
    catch (error) {
        console.error('Error fetching exploits:', error);
        res.status(500).json({ error: 'Failed to fetch exploits' });
    }
}));
// GET /exploits/:id - Fetch a single exploit by ID
//@ts-ignore
router.get('/:id', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const exploit = yield index_1.prisma.exploit.findUnique({
            where: { id: req.params.id },
        });
        if (!exploit) {
            return res.status(404).json({ error: 'Exploit not found' });
        }
        // Serialize BigInt fields
        const serializedExploit = serializeBigInt(exploit);
        res.json(serializedExploit);
    }
    catch (error) {
        console.error('Error fetching exploit:', error);
        res.status(500).json({ error: 'Failed to fetch exploit' });
    }
}));
// POST /exploits - Create a new exploit (admin use)
//@ts-ignore
router.post('/', (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { date, protocol, type, fundsLost, txIds, description, codeSnippet, status } = req.body;
        // Basic validation
        if (!date || !protocol || !type || !fundsLost || !txIds || !description || !status) {
            return res.status(400).json({ error: 'Missing required fields' });
        }
        const exploit = yield index_1.prisma.exploit.create({
            data: {
                date: new Date(date),
                protocol,
                type,
                fundsLost: BigInt(fundsLost), // Ensure fundsLost is BigInt
                txIds,
                description,
                codeSnippet,
                status,
            },
        });
        // Serialize BigInt fields
        const serializedExploit = serializeBigInt(exploit);
        res.status(201).json(serializedExploit);
    }
    catch (error) {
        console.error('Error creating exploit:', error);
        res.status(500).json({ error: 'Failed to create exploit' });
    }
}));
exports.default = router;
