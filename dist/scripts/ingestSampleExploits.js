"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const client_1 = require("@prisma/client");
// Initialize Prisma client
const prisma = new client_1.PrismaClient();
// Convert USD string to lamports (1 SOL = 1e9 lamports, assume $140/SOL)
function usdToLamports(usdStr) {
    const usd = parseFloat(usdStr.replace('$', '').replace('M', '')) * 1e6;
    const solPrice = 140; // $140/SOL (2025 estimate)
    const sol = usd / solPrice;
    return BigInt(Math.round(sol * 1e9));
}
function ingestSampleExploits(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            // Read JSON file
            const exploitData = JSON.parse(fs_1.default.readFileSync(filePath, 'utf-8'));
            for (const exploit of exploitData) {
                // Validate data
                const date = new Date(`${exploit.date}T00:00:00Z`);
                if (isNaN(date.getTime())) {
                    console.warn(`Invalid date for ${exploit.protocol}, skipping`);
                    continue;
                }
                const fundsLost = usdToLamports(exploit.fundsLost);
                const txIds = Array.isArray(exploit.transactionIds) ? exploit.transactionIds : [];
                // Map extra fields to metadata
                const metadata = {
                    id: exploit.id,
                    attacker: exploit.attacker,
                    impact: exploit.impact,
                    timeline: exploit.timeline,
                    technicalDetails: exploit.technicalDetails,
                    vulnerability: exploit.vulnerability,
                    mitigation: exploit.mitigation,
                    transactionData: exploit.transactionData,
                    exploitCode: exploit.exploitCode,
                    fixedCode: exploit.fixedCode,
                    referenceUrl: exploit.referenceUrl,
                };
                yield prisma.exploit.upsert({
                    where: { id: exploit.id },
                    update: {},
                    create: {
                        date,
                        protocol: exploit.protocol || 'Unknown',
                        type: exploit.type || 'Unknown',
                        fundsLost,
                        txIds,
                        description: exploit.description || `Exploit on ${exploit.protocol}`,
                        codeSnippet: exploit.vulnerableCode || null,
                        status: exploit.status || 'Unknown',
                        metadata,
                    },
                });
            }
            console.log(`Ingested ${exploitData.length} sample exploits successfully`);
        }
        catch (error) {
            console.error('Error ingesting sample exploit data:', error.message);
        }
        finally {
            yield prisma.$disconnect();
        }
    });
}
// Run the script
ingestSampleExploits('exploits.json').catch(console.error);
